package laicode;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class laicode {
	
	public laicode () {
		List<List<Integer>> res = nqueens(4);
		System.out.println(res.toString());
	}
	public List<List<Integer>> nqueens(int n) {
	    // Write your solution here.
	    List<List<Integer>> res = new ArrayList<List<Integer>>();
	    Integer[] cur = new Integer[n];
	    boolean[] usedColumn = new boolean[n];
	    boolean[] usedPosDiag = new boolean[2 * n - 1];
	    boolean[] usedNegDiag = new boolean[2 * n - 1];
	    helper(n, res, cur, 0, usedColumn, usedPosDiag, usedNegDiag);
	    return res;
	  }
	  
	  private void helper(int n, List<List<Integer>> res, Integer[] cur, int level, 
	                      boolean[] usedColumn, boolean[] usedPosDiag, boolean[] usedNegDiag){
	    // base case
	    if (level == n) {
	      res.add(Arrays.asList(cur));
	      return;
	    }
	    // current layer
	    for (int i = 0; i < n; i++) {
	      if(!usedColumn[i] && !usedPosDiag[level - i + n - 1] && !usedNegDiag[level + i]) {
	        mark(n, i, level, usedColumn, usedPosDiag, usedNegDiag);
	        cur[level] = i;
	        helper(n, res, cur, level + 1, usedColumn, usedPosDiag, usedNegDiag);
	        unmark(n, i, level, usedColumn, usedPosDiag, usedNegDiag);
	      }
	    }
	  }
	  private void mark(int n, int i, int level, boolean[] usedColumn, 
	                    boolean[] usedPosDiag, boolean[] usedNegDiag) {
	    usedColumn[i] = true;
	    usedPosDiag[level - i + n - 1] = true;
	    usedNegDiag[level + i] = true;
	  }
	  private void unmark(int n, int i, int level, boolean[] usedColumn, 
	                      boolean[] usedPosDiag, boolean[] usedNegDiag){
	    usedColumn[i] = false;
	    usedPosDiag[level - i + n - 1] = false;
	    usedNegDiag[level + i] = false;
	  }
}
